var Number MIN_WAIT_BETWEEN_WATERINGS = 10 // Unit: refresh iteration
var Number MAX_MOISTURE_PERCENT = 30
var Number MIN_TANK_LEVEL_PERCENT = 20

var Number iterationsWoWatering = 0

rule "Arduino0 update"
    when
        Item Arduino0 received update
    then
        logDebug("story1", "No watering since "
            + iterationsWoWatering.intValue() + " iterations")

        var arduinoOutput = Arduino0.state.toString
        // Ignore data sent to Arduino
        if (arduinoOutput.startsWith(">"))
            return false
        // Check for errors
        if (arduinoOutput.startsWith("E_DHT_READ")) {
            logError("story1", "Arduino0 failed to read sensor data")
            return false
        }

        var humidity = transform("REGEX", "HUMIDITY(\\d+).*",
            arduinoOutput)
        postUpdate(Humidity, humidity)
        var temperature = transform("REGEX", ".*TEMPERATURE(\\d+).*",
            arduinoOutput)
        postUpdate(Temperature, temperature)
        var earthMoisture = transform("REGEX", ".*MOISTURE(\\d+).*",
            arduinoOutput)
        postUpdate(EarthMoisture, earthMoisture)
        var waterLevel = transform("REGEX", ".*WATER_LEVEL(\\d+).*",
            arduinoOutput)
        postUpdate(TankLevel, waterLevel)

        // Watering if conditions are met
        if (iterationsWoWatering >= MIN_WAIT_BETWEEN_WATERINGS
            && EarthMoisture.state < MAX_MOISTURE_PERCENT
            && TankLevel.state > MIN_TANK_LEVEL_PERCENT) {
            iterationsWoWatering = 0
            logDebug("story1", "Watering!")
            sendCommand(Arduino0, ">MOTOR=PULSE\n")
        } else {
            iterationsWoWatering = iterationsWoWatering + 1
        }
end

rule "LED update"
    when
        Item Led received update
    then
        if (Led.state == ON)
            sendCommand(Arduino0, ">LED=ON\n")
        else
            sendCommand(Arduino0, ">LED=OFF\n")
end
